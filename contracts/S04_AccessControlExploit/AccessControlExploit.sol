// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * 权限管理漏洞
 * 1.权限配置错误
 * 2.授权检查错误
 * 权限管理漏洞主要有两种预防办法：
 * 使用 Openzeppelin 的权限管理库给合约的特殊函数配置相应的权限，比如使用OnlyOwner修饰器，只有合约所有者才能调用。
 * 在函数的逻辑中确保合约调用者拥有足够的授权。
 * 
 * 保证只有owner可以mint
 * 如果销毁的不是自己的代币，则会检查授权
 * 
 * 代币的铸造、提取资金、暂停等功能较高权限用户才能调用
 */
//Exploit利用
contract AccessControlExploit is ERC20, Ownable {
    //初始化代币名称和代号
    constructor(
        address initialOwner
    ) Ownable(initialOwner) ERC20("Wrong Access", "WA") {}

    //错误的mint函数，没有限制权限
    //1.权限配置错误
    //如果合约中特殊功能没有加上权限管理，那么任何人都能铸造大量代币或将合约中的资金提光
    function badMint(address to, uint amount) public {
        _mint(to, amount);
    }

    //正确的mint函数，使用onlyOwner 修饰器限制权限
    function goodMint(address to, uint amount) public onlyOwner {
        _mint(to, amount);
    }

    //错误的burn函数，没有限制权限
    function badBurn(address account, uint amount) public {
        _burn(account, amount);
    }

    //正确的burn函数，如果销毁的不是自己的代币，则会检查授权
    function goodBurn(address account, uint amount) public {
        if (msg.sender != account) {
            //Allowance允许
            _spendAllowance(account, msg.sender, amount);
        }
        _burn(account, amount);
    }
}
